/*
 * TMS1000 Family Emulator for AVR
 * Copyright (C) 2024-2025 Jason T. Jacques
 * <jtjacques@gmail.com>
 */

#include <avr/io.h>
#include <avr/pgmspace.h>


// custom config first
/*
 * TMS1000 Family Emulator for ATMega
 * Copyright (C) 2024-2025 Jason T. Jacques
 * <jtjacques@gmail.com>
 *
 * tms1600 config
 *
 *                    ____  ____
 *             K1  1 |*   \/    | 40 O0
 *             K2  2 |          | 39 O1
 *             K4  3 |          | 38 O2
 *             K8  4 |          | 37 O3
 *             R0  5 |          | 36 O4
 *             R1  6 |          | 35 O5
 *             R2  7 |          | 34 O6
 *             R3  8 |          | 33 O7
 *   [/RESET]  --  9 |          | 32 --  [AREF]
 *            VCC 10 |  ATMEGA  | 31 GND
 *            GND 11 |  644/32  | 30 VCC
 *          XTAL2 12 |          | 29 IN4
 *          XTAL1 13 |          | 28 IN3
 *             R4 14 |          | 27 IN2
 *             R5 15 |          | 26 IN1
 *             R7 16 |          | 25 R12 [XBTN]
 *             R8 17 |          | 24 R15
 *             R9 18 |          | 23 R14 [SDA]
 *            R10 19 |          | 22 R13 [SCL]
 *      [1HZ]  R6 20 |__________| 21 R11 [SPK]
 */


#define TARGET TMS1600

#define SOFT_RESET

#include <avr/cpufunc.h>

#define TMS1000 1000
#define TMS1100 1100
#define TMS1600 1600

#define SINGLE 0
#define SHFT_O 1
#define SHFT_OR 3

// default config
#ifndef TARGET
#define TARGET TMS1100
#endif

volatile uint8_t rset = 0;
#define reset() (rset = 1)

uint8_t pc, sr, pa, pb, cl, x, y, s, sl, a, ca, cb, cs;

#if TARGET == TMS1600
uint8_t sr1, sr2, sr3, psr1, psr2, psr3, cl1, cl2, cl3, csr1, csr2, csr3;
#endif

// n.b. also used in reset
static void reg_init() {
  pc = 0, sr = 0, pa = 0xf, pb = 0xf, cl = 0, x = 0, y = 0, s = 0, sl = 0,
  a = 0, ca = 0, cb = 0, cs = 0;

#if TARGET == TMS1600
  sr1 = 0, sr2 = 0, sr3 = 0, psr1 = 0, psr2 = 0, psr3 = 0, cl1 = 0, cl2 = 0,
  cl3 = 0, csr1 = 0, csr2 = 0, csr3 = 0;
#endif
}

#if TARGET == TMS1100 || TARGET == TMS1600
#define RAM_SIZE 128
#elif TARGET == TMS1000
#define RAM_SIZE 64
#endif
uint8_t RAM[RAM_SIZE];

#include <avr/interrupt.h>
#include <avr/io.h>
#include <avr/pgmspace.h>

// configuration handlers
// n.b. dummy params to diff direct pins/funcs and indirect
#define COMMA ,
#define PIN(P, N) X COMMA Y COMMA Z COMMA P COMMA N
#define FUNC(P) X COMMA Y COMMA P
#define DIR(X, Y, Z, P, N, D) set_exp(DDR##P, DD##P##N, D)
#define OUT(X) DIR(X, 1)
#define IN(X) DIR(X, 0)

// io utilities
#define on(n, b) ((n) | (1 << (b)))
#define off(n, b) ((n) & ~(1 << (b)))
#define bit(n, b, v) ((v) ? on(n, b) : off(n, b))
#define set_bit(n, b, v) set_exp(n, b, v)
#define get_bit(n, b) (!!(n & 1 << b))
#define set_exp(port, bit, value) \
  (port = (value) ? on(port, bit) : off(port, bit))
#define set_ee(X, Y, Z, P, N, V) (set_exp(PORT##P, PIN##P##N, V))
#define set_ef(X, Y, F, V) (set_##F(V))
#define set_efs(X, Y, F, D, V) (set_##F(D, V))
#define set_x(_1, _2, _3, _4, _5, _6, NAME, ...) NAME
#define set(...) \
  set_x(__VA_ARGS__, set_ee, set_efs, set_ef, set_exp, NULL)(__VA_ARGS__)
#define get_exp(port, bit) ((port & (1 << bit)) > 0)
#define get_ee(X, Y, Z, P, N) (get_exp(PIN##P, PIN##P##N))
#define get_ef(X, Y, F) (get_##F())
#define get_ex(_1, _2, _3, _4, _5, NAME, ...) NAME
#define get(...) \
  get_ex(__VA_ARGS__, get_ee, NULL, get_ef, get_exp, NULL)(__VA_ARGS__)
#define pulse(P) (set(P, 1), set(P, 0))
#define oo(n) (o(0x10 | (n & 0xf)))
#define ro(n) (r(n & 0xf0))
#define out(n) (oo(n), ro(n))

// misc utility
#define mirror(n)                                        \
  (((n & 1 << 7) >> 7 << 0) | ((n & 1 << 6) >> 6 << 1) | \
   ((n & 1 << 5) >> 5 << 2) | ((n & 1 << 4) >> 4 << 3) | \
   ((n & 1 << 3) >> 3 << 4) | ((n & 1 << 2) >> 2 << 5) | \
   ((n & 1 << 1) >> 1 << 6) | ((n & 1 << 0) >> 0 << 7))
#define swap(x, y) ((x ^= y), (y ^= x), (x ^= y))
#define toggle(number, bit) (number ^= (1 << bit))

// program counter
#define ps 6
#define pm ((1 << ps) - 1)
#define next(pc)                                                  \
  (((pc << 1)                /* left shift; or feedback */        \
    | (pc == (pm >> 1) ? 1 : /* if msb 0, others high: 1 */       \
           pc == pm ? 0      /* else if all high: 0 */            \
                    :        /* else xor msb and msb-1 */         \
           !(pc & (1 << (ps - 1))) == !(pc & (1 << (ps - 2))))) & \
   pm) /* mask overflow */

// use pc lookup table
#ifndef DYNAMIC
const uint8_t nextpc[] = {
    next(0x00), next(0x01), next(0x02), next(0x03), next(0x04), next(0x05),
    next(0x06), next(0x07), next(0x08), next(0x09), next(0x0a), next(0x0b),
    next(0x0c), next(0x0d), next(0x0e), next(0x0f), next(0x10), next(0x11),
    next(0x12), next(0x13), next(0x14), next(0x15), next(0x16), next(0x17),
    next(0x18), next(0x19), next(0x1a), next(0x1b), next(0x1c), next(0x1d),
    next(0x1e), next(0x1f), next(0x20), next(0x21), next(0x22), next(0x23),
    next(0x24), next(0x25), next(0x26), next(0x27), next(0x28), next(0x29),
    next(0x2a), next(0x2b), next(0x2c), next(0x2d), next(0x2e), next(0x2f),
    next(0x30), next(0x31), next(0x32), next(0x33), next(0x34), next(0x35),
    next(0x36), next(0x37), next(0x38), next(0x39), next(0x3a), next(0x3b),
    next(0x3c), next(0x3d), next(0x3e), next(0x3f)};
#undef next
#define next(pc) (nextpc[pc])
#endif

// instruction decoding
#define addr(ca, pa, pc) ((ca << (ps + 4)) | (pa << ps) | pc)
#define fetch(ca, pa, pc) (pgm_read_byte(&ROM[addr(ca, pa, pc)]))
#define i(inst) (inst & 0b11000000)
#define w(inst) (inst & 0b00111111)
#define ii(inst) (inst & 0b11110000)
#define c(inst)                                                               \
  (((inst & 0b0001) << 3) | ((inst & 0b0010) << 1) | ((inst & 0b0100) >> 1) | \
   ((inst & 0b1000) >> 3))
#define iii(inst) (inst & 0b11111100)
#define b(inst) (((inst & 0b01) << 1) | ((inst & 0b10) >> 1))
#define iv(inst) (inst) /* (inst & 0b11111111) */
#define v(inst) (inst & 0b11111000)
#define f(inst) \
  (((inst & 0b001) << 2) | ((inst & 0b010)) | ((inst & 0b100) >> 2))

// use operand lookup tables
#ifndef DYNAMIC
const uint8_t ct[] = {c(0x0), c(0x1), c(0x2), c(0x3), c(0x4), c(0x5),
                      c(0x6), c(0x7), c(0x8), c(0x9), c(0xa), c(0xb),
                      c(0xc), c(0xd), c(0xe), c(0xf)};
const uint8_t bt[] = {b(0x0), b(0x1), b(0x2), b(0x3)};
const uint8_t ft[] = {f(0x0), f(0x1), f(0x2), f(0x3),
                      f(0x4), f(0x5), f(0x6), f(0x7)};
#undef c
#define c(inst) (ct[inst & 0b1111])
#undef b
#define b(inst) (bt[inst & 0b11])
#undef f
#define f(inst) (ft[inst & 0b111])
#endif

// (emulated) memory handling
#define ma(x, y) ((x << 4) | y)
#define mexp(_1, _2, _3, NAME, ...) NAME
#define m(...) mexp(__VA_ARGS__, m_set, m_get, NULL)(__VA_ARGS__)
#define m_get(x, y) (RAM[ma(x, y)])
#define m_set(x, y, n) (RAM[ma(x, y)] = n)
#define mbexp(_1, _2, _3, _4, NAME, ...) NAME
#define mb(...) mbexp(__VA_ARGS__, mb_set, mb_get, NULL)(__VA_ARGS__)
#define mb_get(x, y, bit) ((RAM[ma(x, y)] & (1 << bit)) > 0)
#define mb_set(x, y, bit, v) \
  RAM[ma(x, y)] = (v ? RAM[ma(x, y)] | (1 << bit) : RAM[ma(x, y)] & ~(1 << bit))

// io functions
static uint8_t io_get_k();
static uint8_t io_get_o();
static void io_set_o(uint8_t byte);
static void io_set_o_bit(uint8_t o, uint8_t value);
static uint16_t io_get_r();
static void io_set_r(uint16_t data);
static void io_set_r_bit(uint8_t r, uint8_t value);
#define k() io_get_k()
#define oexp(_0, _1, _2, NAME, ...) NAME
#define o(...) \
  oexp(_0, ##__VA_ARGS__, io_set_o_bit, io_set_o, io_get_o, NULL)(__VA_ARGS__)
#define rexp(_0, _1, _2, NAME, ...) NAME
#define r(...) \
  rexp(_0, ##__VA_ARGS__, io_set_r_bit, io_set_r, io_get_r, NULL)(__VA_ARGS__)

#ifndef F_CPU
#if defined __AVR_ATmega32__ || defined __AVR_ATmega32A__
#define F_CPU 16000000UL
#else
#define F_CPU 20000000UL
#endif
#endif  // F_CPU
// -F_CPU

#define O FUNC(o)

#define R FUNC(r)
// avoiding using R_BIT to keep all logic in set_r() function
// #define R_BIT FUNC(r_bit)

#define K FUNC(k)
#define K8_DIV 1

#define L FUNC(l)

#define MODE FUNC(mode)
#define get_mode() 0

#define KL FUNC(kl)
#define get_kl() get_bit(r_reg, 11)

// pin defintions

#define K1 PIN(B, 0)
#define K2 PIN(B, 1)
#define K4 PIN(B, 2)
#define K8 PIN(B, 3)

#define R0 PIN(B, 4)
#define R1 PIN(B, 5)
#define R2 PIN(B, 6)
#define R3 PIN(B, 7)
#define R4 PIN(D, 0)
#define R5 PIN(D, 1)
#define R6 PIN(D, 6)
#define R7 PIN(D, 2)
#define R8 PIN(D, 3)
#define R9 PIN(D, 4)
#define R10 PIN(D, 5)
#define R11 PIN(D, 7)
#define R12 PIN(C, 3)
#define R13 PIN(C, 0)
#define R14 PIN(C, 1)
#define R15 PIN(C, 2)

#define O0 PIN(A, 0)
#define O1 PIN(A, 1)
#define O2 PIN(A, 2)
#define O3 PIN(A, 3)
#define O4 PIN(A, 4)
#define O5 PIN(A, 5)
#define O6 PIN(A, 6)
#define O7 PIN(A, 7)
#define O8 PIN(A, 7)

#define IN1 PIN(C, 4)
#define IN2 PIN(C, 5)
#define IN3 PIN(C, 6)
#define IN4 PIN(C, 7)

#ifndef MCUCR
#define MCUCR SFIOR
#endif  // MCUCR

void phoenix_setup() {
  // don't disable pull-ups globally
  set(MCUCR, PUD, 0);

  // enable pull-ups
  // n.b. inverse key logic!
  set(K1, 1);
  set(K2, 1);
  set(K4, 1);
  set(K8, 1);

  IN(K1);
  IN(K2);
  IN(K4);
  IN(K8);

  OUT(R0);
  OUT(R1);
  OUT(R2);
  OUT(R3);
  OUT(R4);
  OUT(R5);
  OUT(R6);
  OUT(R7);
  OUT(R8);
  OUT(R9);
  OUT(R10);
  OUT(R11);
  OUT(R12);
  OUT(R13);
  OUT(R14);
  OUT(R15);

  OUT(O0);
  OUT(O1);
  OUT(O2);
  OUT(O3);
  OUT(O4);
  OUT(O5);
  OUT(O6);
  OUT(O7);

  // ensure pull-ups disable
  set(IN1, 0);
  set(IN2, 0);
  set(IN3, 0);
  set(IN4, 0);

  IN(IN1);
  IN(IN2);
  IN(IN3);
  IN(IN4);
}

uint8_t xbtn = 0;

uint8_t o_reg = 0;
uint16_t r_reg = 0;

// 2114 SRAM
// - using both halves of the byte to save memory
uint8_t SRAM[1024 >> 1] = {0};
#define sram_addr() (((get_r() & 0b111111) << 4) | (get_o() & 0b1111))
static inline void set_sram(uint8_t data);
static inline uint8_t get_sram();

static inline void update_2114() {
  if (get_bit(r_reg, 13)) {                     // if write bit set
    set_sram(~((r_reg & 0b11110000000) >> 7));  // inverted by CD4502
  }
}

uint8_t mt_output = 0b1111;

static inline void set_o(uint8_t o) {
  o_reg = o;

  update_2114();

  // output the o register?
  o = get(r_reg, 12) ? o : 0;
  set(O0, get(o, 0));
  set(O1, get(o, 1));
  set(O2, get(o, 2));
  set(O3, get(o, 3));
  set(O4, get(o, 4));
  set(O5, get(o, 5));
  set(O6, get(o, 6));
  set(O7, get(o, 7));
}

// static inline uint8_t get_o() {
//   return o_reg;
// }
#define get_o() (o_reg)

static inline void set_r(uint16_t r) {
  r_reg = r;

  // update sram and user outputs
  update_2114();
  mt_output = ~((r_reg & (0b1111 << 7)) >> 7);  // inverted by BC237s

  // output the r register?
  // output the mt_output data?

  // always invert
  // - display: when set, provide return current path
  // - keyboard: when set, provide return current path
  r = 1 /*get(r_reg, 12)*/ ? r ^ 0b111111 : r;
  set(R0, get(r, 0));
  set(R1, get(r, 1));
  set(R2, get(r, 2));
  set(R3, get(r, 3));
  set(R4, get(r, 4));
  set(R5, get(r, 5));
  // set(R6, get(r, 6)); // clock output
  set(R7, get(mt_output, 0));
  set(R8, get(mt_output, 1));
  set(R9, get(mt_output, 2));
  set(R10, get(mt_output, 3));
  // set(R11, get(r, 11)); // speaker out
  // set(R12, get(r, 12));  // xtra keys and buzzer out
  // set(R13, get(r, 13)); // eeprom scl
  set(R14, get(r, 14));  // also, eeprom sda
  set(R15, get(r, 15));
}

// static inline void set_r_bit(uint8_t r, uint8_t v) {
//   p_r_reg = r_reg;
//   set_bit(r_reg, r, v);
//   if (p_r_reg != r_reg) {
//     // output the r register
//   }
// }

// static inline uint16_t get_r() {
//   return r_reg;
// }
#define get_r() (r_reg)

// static inline uint8_t get_r_bit(uint8_t b) {
//   return get_bit(r_reg, b);
// }

static inline uint8_t get_k() {
  // get extra button flags (xbtn)
  if (get(r_reg, 6)) {  // same time as the real-time clock update in the rom
    set(R12, 0);
    _NOP();  // required for synchronisation before pin reads
    xbtn |= ((1 << 7) | (!get(K8) << 3) | (!get(K4) << 2) | (!get(K2) << 1) |
             (!get(K1) << 0));
    set(R12, 1);
  }

  // if (virtual) 4016 enabled, read from inputs
  if (get(r_reg, 6)) {
    return (get(IN4) << 3) | (get(IN3) << 2) | (get(IN2) << 1) |
           (get(IN1) << 0);
  }

  // n.b. keyboard is using pullups
  return ((!get(K8) << 3) | (!get(K4) << 2) | (!get(K2) << 1) |
          (!get(K1) << 0));
}

static inline uint8_t get_l() {
  if (!get_bit(r_reg, 13)) {
    return get_sram();
  }
  return ~((get_r() & 0b11110000000) >> 7);
}


static inline void set_sram(uint8_t data) {
  uint16_t addr = sram_addr();
  SRAM[addr >> 1] = (SRAM[addr >> 1] & (0b1111 << (4 * !(addr & 1)))) |
                    (data & 0b1111) << (4 * (addr & 1));
}

static inline uint8_t get_sram() {
  uint16_t addr = sram_addr();
  return (SRAM[addr >> 1] >> (4 * (addr & 1))) & 0b1111;
}

unsigned long clock_count = 0;
uint8_t clock_reg = 0;
#define ONCE_CLOCK_HOOK one_hz();
static inline void one_hz() {
    clock_count++;
    if (clock_count > 36) {
      clock_reg = !clock_reg;
      set(R6, clock_reg);
      clock_count = 0;
    }
}

uint8_t x_cpup = 0, x_cpud = 0;
#define ONCE_INST_HOOK once();
static inline void once() {
  if (get(xbtn, 7)) {
    // reset
    if (get(xbtn, 0)) {
      xbtn = 0;  // set(xbtn, 0, 0);
      reset();
      phoenix_clock_off(); 
      return 0; 
    }

    set(xbtn, 7, 0);
  }
}


// core config

// rom and opla
const unsigned char OPLA[] = {
  0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x05, 0x05,
  0x06, 0x06, 0x07, 0x07, 0x08, 0x08, 0x09, 0x09, 0x0a, 0x0a, 0x0b, 0x0b,
  0x0c, 0x0c, 0x0d, 0x0d, 0x0e, 0x0e, 0x0f, 0x0f, 0x10, 0x3f, 0x11, 0x06,
  0x12, 0x5b, 0x13, 0x4f, 0x14, 0x66, 0x15, 0x6d, 0x16, 0x7d, 0x17, 0x07,
  0x18, 0x7f, 0x19, 0x6f, 0x1a, 0x77, 0x1b, 0xfc, 0x1c, 0x39, 0x1d, 0x5e,
  0x1e, 0x79, 0x1f, 0x71
};
const unsigned int OPLA_len = 64;

// rom and opla
const unsigned char ROM[] PROGMEM = {
  0x4f, 0x0c, 0xe3, 0x04, 0x27, 0x17, 0x40, 0x81, 0x0c, 0x3b, 0x99, 0xc3,
  0x37, 0x3f, 0xff, 0x0f, 0x99, 0x29, 0x0d, 0xb2, 0x11, 0x14, 0x2b, 0x1e,
  0x2f, 0x0f, 0x19, 0x9a, 0x2a, 0x29, 0x2c, 0x28, 0x0f, 0x19, 0x4f, 0x9a,
  0x08, 0x3b, 0x46, 0x2e, 0x80, 0x46, 0x0b, 0xff, 0xff, 0x34, 0x8b, 0x0f,
  0xff, 0x3f, 0x46, 0xff, 0xaa, 0x2d, 0x44, 0xbd, 0x48, 0x2a, 0xff, 0x04,
  0xff, 0x27, 0x7f, 0x4f, 0x10, 0x80, 0x47, 0x11, 0xca, 0x27, 0x0e, 0xca,
  0x0e, 0x28, 0x28, 0x11, 0x29, 0xb6, 0xa1, 0x28, 0x1e, 0xb4, 0x28, 0x14,
  0x14, 0x12, 0x38, 0xca, 0x1a, 0x46, 0x27, 0x83, 0x47, 0x0c, 0xb7, 0x46,
  0xb7, 0x23, 0x11, 0x0f, 0xdc, 0x94, 0x83, 0x0e, 0x0b, 0xca, 0x83, 0x4b,
  0x83, 0x4f, 0x28, 0x04, 0x83, 0x0d, 0x38, 0x0d, 0x11, 0xb3, 0x08, 0x0c,
  0x22, 0x4a, 0x04, 0x4a, 0x0f, 0x0c, 0x4d, 0x0c, 0x10, 0x80, 0x83, 0x47,
  0x93, 0x70, 0x3a, 0x28, 0x62, 0x63, 0x0f, 0x00, 0x7f, 0x88, 0x96, 0x7f,
  0x00, 0x93, 0x60, 0x17, 0x0c, 0x05, 0xad, 0xb4, 0x00, 0x70, 0x89, 0x39,
  0xbd, 0x70, 0x83, 0x00, 0x00, 0x1d, 0x61, 0x92, 0x93, 0x99, 0x86, 0x1c,
  0x95, 0x83, 0x0d, 0x1c, 0x70, 0x3b, 0x1e, 0x1c, 0x85, 0x38, 0x8a, 0x9d,
  0x18, 0xac, 0xa2, 0xbc, 0x4f, 0x00, 0x00, 0x00, 0x70, 0x70, 0xb8, 0xbd,
  0x10, 0x80, 0x39, 0x4f, 0xaf, 0x86, 0x65, 0x38, 0x99, 0x6c, 0xb9, 0x3b,
  0xb9, 0xb9, 0xb9, 0xbc, 0x00, 0x3b, 0xa6, 0xb9, 0x10, 0x14, 0x4f, 0x9b,
  0x9c, 0x6d, 0x38, 0x67, 0x64, 0x69, 0x83, 0x3a, 0x00, 0xb1, 0xa5, 0xb9,
  0x39, 0x6f, 0x6e, 0x6a, 0x82, 0x3a, 0x0b, 0xb9, 0x38, 0x4f, 0xaf, 0x18,
  0x3a, 0x66, 0xb9, 0x93, 0x89, 0x6b, 0xb9, 0xb5, 0xb9, 0x14, 0xb9, 0x3b,
  0x68, 0x9d, 0x39, 0xa7, 0x10, 0x80, 0x4c, 0x4b, 0x1f, 0x3a, 0x18, 0x3b,
  0x27, 0xf4, 0x10, 0x84, 0x11, 0x0b, 0x03, 0x91, 0xbc, 0x1a, 0x46, 0x1f,
  0x46, 0xfe, 0x4f, 0x28, 0x40, 0xde, 0x28, 0x17, 0x39, 0x48, 0x28, 0x46,
  0x00, 0x2a, 0x83, 0xc3, 0x3e, 0x4c, 0xe6, 0x40, 0x60, 0x30, 0x86, 0x03,
  0x21, 0x0f, 0x41, 0x31, 0x27, 0x1f, 0x2e, 0x27, 0x4b, 0x44, 0xda, 0x4c,
  0x84, 0x4e, 0x03, 0x2a, 0x7f, 0x94, 0x73, 0x21, 0x10, 0x80, 0x39, 0x11,
  0xe4, 0xad, 0x18, 0xca, 0x1e, 0x10, 0xaa, 0x49, 0x46, 0x83, 0x0d, 0x29,
  0x95, 0x8c, 0x16, 0xe9, 0x83, 0x0f, 0x1d, 0x38, 0x41, 0x3a, 0x83, 0x11,
  0x3a, 0xb7, 0xba, 0x4b, 0x00, 0x9b, 0x1d, 0x92, 0xac, 0x38, 0x2e, 0x47,
  0x1c, 0xa7, 0x1b, 0x0f, 0x99, 0x16, 0x88, 0x3a, 0x38, 0x39, 0xa8, 0xab,
  0x16, 0x0d, 0x83, 0x4b, 0xb4, 0x0c, 0x4f, 0x0c, 0x4f, 0x47, 0xa7, 0x38,
  0x10, 0x80, 0x4e, 0x46, 0x3a, 0x60, 0x19, 0x22, 0x1a, 0x99, 0xc7, 0x4f,
  0x88, 0xaa, 0x58, 0x0f, 0x68, 0x83, 0x11, 0x3b, 0x88, 0x28, 0x80, 0x3a,
  0x0b, 0x31, 0x0b, 0x41, 0x39, 0x86, 0x41, 0x54, 0x88, 0x80, 0x41, 0xa8,
  0xad, 0x1e, 0x99, 0xc3, 0x49, 0xcb, 0x30, 0x10, 0x14, 0x18, 0x9b, 0x28,
  0x14, 0x3b, 0x4a, 0x9c, 0x17, 0x0b, 0x68, 0x30, 0xa2, 0x10, 0x14, 0x44,
  0x35, 0xf1, 0x1f, 0x86, 0x10, 0x80, 0xc3, 0x4c, 0x14, 0x91, 0x0b, 0x10,
  0xc3, 0x0b, 0x34, 0x18, 0x41, 0x18, 0x3b, 0xfe, 0x15, 0x1a, 0x64, 0x10,
  0x46, 0x91, 0x38, 0x0b, 0x49, 0x3a, 0xa9, 0x80, 0xb8, 0xb6, 0xab, 0x46,
  0x83, 0x1e, 0x83, 0x14, 0x1e, 0x49, 0x99, 0xb8, 0x36, 0x49, 0x2e, 0x41,
  0x91, 0x3a, 0x13, 0x38, 0x62, 0x33, 0xaa, 0x39, 0x91, 0xaa, 0x41, 0x4f,
  0x41, 0x8b, 0x19, 0x60, 0x3a, 0x4e, 0x0f, 0x60, 0x10, 0x80, 0xc3, 0x2a,
  0x9c, 0x2a, 0x1f, 0x42, 0x21, 0x42, 0x18, 0x44, 0x00, 0xe1, 0x27, 0x3e,
  0x65, 0x48, 0x2a, 0x21, 0xa2, 0xdf, 0x27, 0x38, 0x27, 0x9c, 0x0b, 0x13,
  0x28, 0x2a, 0x4a, 0xbd, 0xa8, 0x19, 0x00, 0xad, 0x4a, 0x8b, 0x40, 0x2c,
  0x6a, 0x80, 0x1a, 0x2e, 0x2c, 0x18, 0x92, 0x27, 0x0f, 0x38, 0x1e, 0x27,
  0x10, 0x21, 0xaa, 0xaf, 0x41, 0x2e, 0x42, 0x3e, 0x21, 0x25, 0x9e, 0x27,
  0x10, 0x80, 0xe3, 0x4d, 0x21, 0x40, 0x27, 0x0d, 0x3b, 0x0f, 0x37, 0x27,
  0x36, 0x38, 0xe3, 0x1d, 0xa4, 0x8a, 0xb2, 0x34, 0x0b, 0x84, 0x42, 0x42,
  0x17, 0xa9, 0x8c, 0x93, 0x4d, 0x48, 0x4a, 0xdc, 0x00, 0x08, 0x33, 0x4f,
  0x31, 0x88, 0xad, 0x08, 0x1d, 0x39, 0x18, 0x0c, 0x0d, 0x3a, 0x0c, 0x27,
  0xd9, 0x0f, 0x35, 0xd9, 0x32, 0x4a, 0x30, 0x44, 0x0c, 0x17, 0x27, 0xe3,
  0x0d, 0x08, 0xd9, 0x17, 0x10, 0x80, 0xe1, 0x2a, 0xa5, 0x28, 0x1a, 0x4c,
  0xc3, 0x1f, 0xc3, 0x4c, 0xc3, 0x83, 0x10, 0x0f, 0x89, 0x39, 0x5c, 0xdd,
  0x0b, 0x98, 0x36, 0x10, 0x19, 0xc3, 0x46, 0x19, 0x46, 0xfe, 0xed, 0x38,
  0x00, 0x1f, 0x89, 0x34, 0x9b, 0x11, 0x13, 0x4a, 0x15, 0x0f, 0x14, 0x30,
  0x35, 0x28, 0xfe, 0x9b, 0xc3, 0x49, 0x35, 0x28, 0x22, 0x0f, 0xaa, 0x32,
  0x6c, 0x9b, 0xc3, 0xf3, 0x54, 0x9e, 0x3a, 0xad, 0x10, 0x80, 0xaa, 0x28,
  0x27, 0x4e, 0x40, 0x4f, 0x4b, 0x0f, 0x94, 0x10, 0x91, 0x7f, 0xb3, 0x38,
  0x11, 0x3e, 0x83, 0x25, 0x1c, 0x1a, 0x1f, 0xfe, 0x11, 0x28, 0x0a, 0x02,
  0x2c, 0x0f, 0x27, 0xbd, 0x80, 0x19, 0x93, 0xe1, 0x2d, 0x3b, 0x89, 0x04,
  0x0b, 0x1a, 0x98, 0x27, 0xc3, 0x21, 0x96, 0x3e, 0xca, 0x13, 0x4b, 0x03,
  0x0f, 0x07, 0x42, 0x85, 0x4a, 0x7f, 0x46, 0x3f, 0x44, 0x4e, 0x82, 0x16,
  0x10, 0x80, 0x4f, 0x1f, 0x4f, 0x27, 0x3a, 0xf7, 0x86, 0x9b, 0xb4, 0x46,
  0x4f, 0x91, 0x21, 0x1d, 0x9a, 0x48, 0x0d, 0x44, 0x0b, 0x0f, 0x4b, 0x0c,
  0x0c, 0xad, 0xb2, 0x39, 0x97, 0x17, 0x4a, 0xdc, 0x00, 0x21, 0x0d, 0xa9,
  0x4f, 0x0d, 0x0d, 0x40, 0x1e, 0x40, 0x18, 0x0d, 0x4b, 0x3b, 0x04, 0xce,
  0x0f, 0x38, 0x4c, 0x0d, 0x0f, 0x4b, 0x93, 0x48, 0x4f, 0x42, 0xc3, 0x0d,
  0x0c, 0x4a, 0xce, 0x44, 0x10, 0x80, 0x41, 0x4a, 0x22, 0x22, 0x0a, 0x0c,
  0x3a, 0x5c, 0x0b, 0x0c, 0x41, 0x0f, 0x22, 0x04, 0xaa, 0x8c, 0x27, 0x8c,
  0xaf, 0x1c, 0x41, 0xad, 0x70, 0x22, 0x07, 0x19, 0x0c, 0x21, 0x7f, 0x87,
  0x00, 0x98, 0x41, 0x02, 0x4e, 0x18, 0xad, 0x47, 0x15, 0xae, 0xee, 0x23,
  0x26, 0x41, 0x43, 0x4a, 0x82, 0x7f, 0x9d, 0x0d, 0x92, 0x0d, 0xaa, 0xa8,
  0x40, 0x43, 0x0a, 0x3b, 0x02, 0xa5, 0x39, 0x4e, 0x10, 0x80, 0x41, 0x4f,
  0x0b, 0x0d, 0x4b, 0x27, 0x11, 0x11, 0xb2, 0xbc, 0x84, 0x3a, 0x0c, 0x38,
  0x14, 0x83, 0x18, 0x8f, 0x90, 0x7f, 0x0c, 0x49, 0x4e, 0x7f, 0x41, 0xa2,
  0x9d, 0x4f, 0x0c, 0x98, 0x8c, 0xbd, 0x18, 0x0f, 0x8c, 0x95, 0x1e, 0x49,
  0xaa, 0x88, 0x70, 0x45, 0x0f, 0xa6, 0x0d, 0x41, 0x0d, 0x0d, 0x70, 0x97,
  0x38, 0xb8, 0x39, 0x82, 0x45, 0x39, 0x3b, 0x3a, 0x4f, 0x4f, 0x0c, 0x4e,
  0x10, 0x80, 0x2c, 0x44, 0x4a, 0x21, 0x21, 0x28, 0x27, 0x27, 0x2a, 0x2e,
  0xf2, 0x2a, 0x0f, 0x21, 0x00, 0x48, 0x21, 0x0f, 0x27, 0x27, 0x27, 0x27,
  0xba, 0x4a, 0x0f, 0x27, 0x82, 0x44, 0x21, 0x2e, 0x00, 0x44, 0x21, 0x28,
  0x42, 0x21, 0x42, 0xaf, 0x0f, 0x40, 0x2e, 0x2c, 0x04, 0xa3, 0x04, 0x2e,
  0x0f, 0x48, 0x28, 0x04, 0x28, 0x21, 0x04, 0x44, 0x0f, 0x27, 0x28, 0x0f,
  0x2c, 0x87, 0x04, 0x27, 0x1c, 0xf5, 0xa4, 0x2c, 0x13, 0x21, 0xb6, 0x44,
  0x87, 0x80, 0x12, 0x71, 0x12, 0x18, 0x72, 0x21, 0x00, 0x16, 0x96, 0x12,
  0xac, 0xb6, 0x21, 0xa9, 0x91, 0x80, 0x16, 0x80, 0x79, 0x93, 0xb2, 0x70,
  0x00, 0x7e, 0x80, 0x75, 0x16, 0xae, 0x92, 0x21, 0x00, 0x16, 0x18, 0x84,
  0x76, 0x8b, 0x21, 0x74, 0x21, 0x21, 0x12, 0x8c, 0x82, 0x7a, 0x1e, 0x21,
  0x9a, 0x7c, 0x21, 0x8a, 0x21, 0x78, 0x21, 0xaa, 0x21, 0x7d, 0x21, 0xab,
  0x15, 0x78, 0x21, 0x21, 0x80, 0x9a, 0x11, 0x8a, 0x19, 0x72, 0x1a, 0x73,
  0x00, 0x15, 0x91, 0x19, 0x80, 0xa7, 0x80, 0x21, 0x21, 0x80, 0x84, 0x93,
  0xb2, 0xb5, 0xb3, 0xba, 0x00, 0xaa, 0x80, 0x8c, 0x14, 0x9c, 0xbc, 0xb6,
  0x00, 0x76, 0x11, 0x1e, 0x48, 0x7a, 0x74, 0x7b, 0x70, 0x7c, 0x11, 0x1e,
  0x21, 0xbc, 0x21, 0x70, 0x21, 0x8d, 0x1a, 0x21, 0x1e, 0x8e, 0x7b, 0x21,
  0x21, 0x7e, 0x2f, 0xb5, 0x4f, 0x0f, 0xf0, 0x21, 0x27, 0x27, 0x27, 0x45,
  0x4a, 0x43, 0x2f, 0x71, 0x00, 0x4a, 0xf0, 0x17, 0x0f, 0x04, 0x1c, 0x27,
  0x40, 0x2c, 0x4b, 0x27, 0xf0, 0x11, 0x22, 0xb7, 0x00, 0x21, 0xf0, 0x44,
  0x47, 0x2e, 0x89, 0x27, 0x00, 0x42, 0x99, 0xae, 0x80, 0xf0, 0x48, 0x40,
  0x29, 0x27, 0x21, 0x2b, 0x27, 0x1d, 0x4c, 0x2c, 0x4d, 0x21, 0xa5, 0xb6,
  0x2f, 0x1b, 0x96, 0x3f, 0x2c, 0x48, 0x7f, 0x21, 0x4d, 0x7a, 0x27, 0x2e,
  0x43, 0x3e, 0x8d, 0x45, 0x21, 0x2e, 0x2e, 0x45, 0x0d, 0x3e, 0x22, 0x27,
  0xd4, 0x0f, 0x11, 0x9f, 0x0f, 0x43, 0x21, 0x4d, 0x60, 0x4b, 0x68, 0x27,
  0x00, 0x89, 0x27, 0x4d, 0x27, 0x02, 0x45, 0x21, 0x08, 0x43, 0x11, 0x0b,
  0xca, 0x2f, 0x43, 0x46, 0x17, 0x21, 0x22, 0x40, 0x2e, 0x10, 0x22, 0x82,
  0x4b, 0x2c, 0x27, 0x79, 0x66, 0x27, 0x47, 0x77, 0x2c, 0x10, 0x11, 0x0b,
  0x4b, 0x99, 0x0b, 0x1f, 0x21, 0x27, 0x9f, 0x27, 0x4a, 0x11, 0x2e, 0xe9,
  0x20, 0x42, 0x2c, 0x48, 0x10, 0x10, 0x2a, 0x9e, 0x2e, 0x03, 0x3a, 0x83,
  0x4b, 0x27, 0x2c, 0x42, 0x0f, 0x0f, 0x03, 0x10, 0x40, 0x27, 0x21, 0x27,
  0xe0, 0xa3, 0x0b, 0x21, 0x27, 0x4b, 0x29, 0x27, 0x27, 0x80, 0x47, 0x2a,
  0x80, 0x4a, 0x29, 0x8b, 0x38, 0x21, 0x2c, 0x07, 0x42, 0x25, 0x8b, 0x07,
  0x2c, 0x4b, 0x4f, 0x21, 0x47, 0x38, 0x36, 0x42, 0x37, 0x21, 0x00, 0xb8,
  0x00, 0x4f, 0x47, 0x27, 0x00, 0x4b, 0x91, 0x1e, 0x00, 0x00, 0x16, 0x47,
  0x47, 0x00, 0x35, 0x39, 0x4f, 0x27, 0xa5, 0x47, 0x00, 0x29, 0x34, 0x47,
  0x47, 0x00, 0xa7, 0xec, 0x00, 0x3b, 0x00, 0xc2, 0xdc, 0x47, 0x34, 0x11,
  0x27, 0x9b, 0x00, 0x16, 0x4f, 0x16, 0xa9, 0xde, 0x3a, 0xd6, 0xa1, 0x12,
  0x16, 0x27, 0x4a, 0x21, 0xc2, 0xec, 0x2c, 0x9f, 0x34, 0x40, 0x21, 0xc2,
  0x1e, 0x92, 0x00, 0x1e, 0x00, 0x29, 0x89, 0xdc, 0x00, 0xa7, 0x4f, 0x00,
  0x00, 0x00, 0xc2, 0xc3, 0x48, 0x00, 0xa2, 0x4f, 0x2c, 0x4b, 0x3d, 0x3c,
  0x00, 0x8d, 0x4b, 0x2f, 0x27, 0x00, 0x00, 0x17, 0x00, 0x30, 0x00, 0xa7,
  0x2c, 0x3c, 0x0f, 0x30, 0x21, 0x22, 0x00, 0x36, 0x4b, 0x34, 0x0f, 0x4b,
  0x48, 0x4b, 0x32, 0x9e, 0x9d, 0x34, 0x4b, 0xb7, 0x2c, 0x48, 0x30, 0x22,
  0x10, 0xa7, 0xbb, 0x2f, 0x84, 0x0b, 0x00, 0x2c, 0x00, 0xc0, 0x40, 0x21,
  0x00, 0x11, 0x84, 0x11, 0x00, 0x00, 0x4f, 0x48, 0x1d, 0x00, 0x28, 0xa7,
  0x29, 0x22, 0x06, 0x4f, 0x00, 0x4b, 0xa5, 0x0f, 0x3b, 0x00, 0xad, 0x2c,
  0x00, 0x38, 0x00, 0x2c, 0x27, 0xa7, 0x21, 0x29, 0x9d, 0x27, 0x00, 0x34,
  0x41, 0x27, 0xcb, 0xc0, 0x4f, 0x4b, 0x2f, 0x15, 0xa1, 0x0f, 0x27, 0x29,
  0x28, 0x4b, 0x10, 0x6c, 0x4b, 0x0b, 0x2c, 0xa5, 0x0f, 0x60, 0x0b, 0x17,
  0x89, 0x40, 0x40, 0x4f, 0x0a, 0xa6, 0x29, 0x0f, 0x12, 0x19, 0x2e, 0xc3,
  0x0b, 0x28, 0x3f, 0x22, 0x46, 0x22, 0x28, 0x21, 0x0f, 0xe3, 0x29, 0x0c,
  0x64, 0x10, 0x17, 0x2c, 0xd5, 0x4b, 0xaa, 0xda, 0x10, 0x27, 0xa6, 0xda,
  0x19, 0x08, 0x4b, 0xa6, 0xa2, 0x21, 0x2f, 0x27, 0x0d, 0x60, 0x2f, 0x2f,
  0x4b, 0x22, 0x40, 0x2c, 0x16, 0xc2, 0x96, 0x4b, 0xa5, 0x2d, 0x22, 0x38,
  0x07, 0x27, 0x00, 0x47, 0x00, 0x2f, 0x4b, 0xbb, 0x00, 0x89, 0x27, 0x85,
  0x00, 0x00, 0x1e, 0x22, 0x7f, 0x00, 0x2d, 0x03, 0x0f, 0x38, 0xbe, 0x7f,
  0x00, 0x4f, 0x11, 0x4f, 0x47, 0x00, 0x00, 0x27, 0x00, 0x07, 0x00, 0x4f,
  0x9e, 0x27, 0x2f, 0x4f, 0x70, 0x2d, 0x00, 0x29, 0x4f, 0x7f, 0xc5, 0x70,
  0x21, 0xc0, 0x98, 0x7f, 0x15, 0xad, 0x16, 0x4f, 0x2c, 0x40, 0x2f, 0x22,
  0x37, 0x27, 0xac, 0x2f, 0x4f, 0x3a, 0x98, 0x1d, 0x38, 0x1d, 0x39, 0x21,
  0x32, 0x39, 0x1d, 0x94, 0x31, 0x33, 0x35, 0x9d, 0x21, 0x90, 0xc0, 0x80,
  0x8e, 0xb8, 0xbe, 0x2c, 0xa5, 0x22, 0x95, 0x31, 0xbc, 0x34, 0x35, 0x34,
  0x8c, 0xb6, 0x89, 0xa3, 0x37, 0xa7, 0x30, 0x1d, 0x40, 0xb5, 0x36, 0xae,
  0x3b, 0x3b, 0x1d, 0x8d, 0x32, 0x3a, 0x36, 0x38, 0x4f, 0x0f, 0x27, 0x4f,
  0x29, 0x4b, 0x29, 0x30, 0x10, 0x4b, 0x10, 0x2c, 0x41, 0x0b, 0x83, 0x36,
  0x37, 0x0b, 0xb9, 0x0f, 0x94, 0x3b, 0x98, 0x18, 0x08, 0x18, 0x29, 0xb0,
  0x32, 0x10, 0x4f, 0x19, 0x4b, 0x2c, 0x9f, 0x15, 0x00, 0x89, 0x8c, 0xc0,
  0x28, 0x11, 0x83, 0xc0, 0x0a, 0x15, 0x0b, 0x82, 0x4b, 0x2c, 0x29, 0x0f,
  0x17, 0x15, 0x0b, 0x88, 0x27, 0x3f, 0xe3, 0x2c, 0x34, 0x15, 0x4f, 0x34,
  0xfe, 0x4b, 0x29, 0xbc, 0x16, 0xc2, 0xbc, 0x16, 0x00, 0x47, 0xb6, 0xdc,
  0x00, 0x00, 0x00, 0x33, 0x00, 0x17, 0x30, 0x47, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x4f, 0x4f, 0x47, 0x00, 0x0b, 0xa1, 0x91, 0x4f, 0x98, 0x27,
  0x00, 0x4f, 0x00, 0x3b, 0x00, 0x00, 0x00, 0x47, 0x00, 0x83, 0x00, 0x32,
  0xaf, 0x10, 0x1a, 0x39, 0x31, 0x41, 0x00, 0xae, 0x11, 0x47, 0x37, 0xb5,
  0x28, 0x85, 0xbb, 0x3a, 0x3b, 0xa7, 0x38, 0x4f, 0x1f, 0xc0, 0x86, 0x4b,
  0x6e, 0x29, 0xb1, 0x3f, 0x8f, 0x6f, 0x00, 0x4b, 0x00, 0x17, 0x27, 0xbd,
  0x00, 0x2d, 0x0b, 0x19, 0x00, 0x00, 0x25, 0x64, 0xa7, 0x00, 0x70, 0x89,
  0x2f, 0x7a, 0xa1, 0x05, 0x00, 0x1f, 0x47, 0x8d, 0x19, 0x00, 0x85, 0x3e,
  0x00, 0x14, 0x00, 0x7f, 0x5c, 0x21, 0x7f, 0x25, 0x85, 0x25, 0x00, 0x40,
  0x91, 0xbd, 0x40, 0xb9, 0x4b, 0x27, 0xab, 0x07, 0xbb, 0x4b, 0x87, 0xa1,
  0x21, 0x75, 0x41, 0x9d, 0xcc, 0x64, 0x4c, 0x21, 0x6a, 0x11, 0x89, 0x60,
  0x46, 0x60, 0xb8, 0x7d, 0x00, 0x0f, 0x68, 0x99, 0x1b, 0x1f, 0x27, 0x60,
  0x89, 0x60, 0x2e, 0x29, 0x60, 0x4b, 0x21, 0x95, 0x00, 0x28, 0x14, 0x2a,
  0x47, 0x60, 0x2e, 0x13, 0x80, 0x68, 0x80, 0x2f, 0x05, 0x60, 0x4b, 0xa6,
  0xba, 0x60, 0x60, 0x89, 0x46, 0x21, 0x46, 0x7b, 0x46, 0x7b, 0x2d, 0x21,
  0x70, 0x94, 0x73, 0x21, 0x4b, 0x2f, 0x27, 0x21, 0x27, 0x40, 0x29, 0x2d,
  0x48, 0x44, 0x00, 0x3e, 0x27, 0x4b, 0x05, 0x27, 0x00, 0xed, 0x4b, 0xed,
  0x00, 0x00, 0x82, 0xb8, 0x50, 0x0f, 0x21, 0x60, 0xb5, 0x86, 0xfe, 0x05,
  0x00, 0x86, 0x47, 0x8b, 0x27, 0x89, 0x4f, 0xb5, 0x00, 0x0f, 0x00, 0x07,
  0x69, 0x2d, 0x27, 0x10, 0xab, 0x7f, 0x17, 0x3f, 0x2f, 0x4b, 0x40, 0x0b,
  0x25, 0x4b, 0xb3, 0x10, 0x0f, 0x43, 0x81, 0xbd, 0x2e, 0x46, 0x4a, 0x32,
  0x86, 0x0c, 0x21, 0x2a, 0xa2, 0x10, 0x40, 0x04, 0xae, 0x0a, 0x40, 0x4c,
  0x27, 0x89, 0x0c, 0x0b, 0x22, 0x27, 0xc2, 0x85, 0x0b, 0x4f, 0x70, 0x0d,
  0x02, 0x21, 0x21, 0x60, 0x96, 0xaa, 0x40, 0x4c, 0x50, 0x2e, 0x1b, 0x28,
  0x2f, 0x9a, 0x4c, 0x27, 0x10, 0x7a, 0x7f, 0x2f, 0x19, 0x0d, 0x21, 0x27,
  0x92, 0x4c, 0x7f, 0x22, 0x43, 0x40, 0x2e, 0x40, 0x2e, 0x6a, 0x4b, 0x28,
  0x28, 0x41, 0x0f, 0x3a, 0x27, 0x10, 0x2f, 0xbb, 0x08, 0x3a, 0x1c, 0x0b,
  0x38, 0x10, 0x14, 0x37, 0x60, 0x0c, 0x46, 0xa8, 0x85, 0xea, 0xb2, 0x19,
  0x42, 0xa9, 0x1a, 0x0b, 0x10, 0xbd, 0xda, 0x10, 0xa9, 0x60, 0x4f, 0xdf,
  0x0d, 0x68, 0x47, 0x9a, 0x47, 0x2b, 0x16, 0x16, 0x2c, 0xff, 0xc3, 0x17,
  0x60, 0x18, 0x47, 0x1e, 0x80, 0x0b, 0x10, 0x0b, 0x0b, 0x0b, 0x1c, 0x18,
  0x18, 0x83, 0x1a, 0x0b, 0x46, 0x22, 0x10, 0x58, 0x0b, 0xac, 0xff, 0x82,
  0x4f, 0x14, 0x80, 0x2e, 0x8a, 0x1c, 0x7b, 0x40, 0x10, 0x0c, 0x60, 0x92,
  0x1c, 0x15, 0xa6, 0x46, 0x28, 0x18, 0x29, 0x0b, 0x64, 0x99, 0x95, 0x21,
  0x80, 0x60, 0x1c, 0x18, 0x0c, 0x1e, 0x1f, 0x21, 0x0b, 0x6c, 0x84, 0x7b,
  0x8b, 0xf7, 0x68, 0x7d, 0x49, 0x0b, 0xba, 0xa5, 0x4b, 0x70, 0x14, 0x21,
  0x1c, 0x73, 0x21, 0x94, 0x21, 0x75, 0x27, 0x45, 0x46, 0x0d, 0x27, 0x08,
  0xac, 0x47, 0x35, 0x0c, 0x4f, 0x36, 0x19, 0x3e, 0x10, 0x37, 0xc0, 0x4f,
  0xcc, 0x39, 0xbc, 0xbb, 0x0b, 0x94, 0x68, 0x27, 0x21, 0x0b, 0x8a, 0x04,
  0x5b, 0x88, 0x80, 0x27, 0x0f, 0x22, 0xbc, 0x36, 0xb1, 0xff, 0x2f, 0x60,
  0x14, 0x39, 0x10, 0x8e, 0x4f, 0x17, 0x22, 0xbc, 0x47, 0x43, 0x10, 0x4b,
  0x4f, 0x38, 0xa3, 0x39, 0xb4, 0xba, 0x4b, 0x0f, 0x3a, 0x32, 0x89, 0x3a,
  0x40, 0x38, 0xa3, 0xb6, 0x33, 0x27, 0x3e, 0x48, 0x31, 0x9e, 0x0f, 0x41,
  0x1c, 0x93, 0x27, 0x38, 0x15, 0xbb, 0xbf, 0x15, 0x13, 0x18, 0x1b, 0x23,
  0x2c, 0xc0, 0x87, 0x85, 0xce, 0x2f, 0x4f, 0xb4, 0xa3, 0x3e, 0x4f, 0x60,
  0x4f, 0x8c, 0xa5, 0x2e, 0xb8, 0x32, 0x0b, 0x90, 0xa5, 0x30, 0x16, 0xa2,
  0x42, 0xa6, 0x39, 0x22, 0x4f, 0x07, 0x4f, 0x38, 0x1c, 0x47, 0x47, 0x4c,
  0x21, 0xa4, 0x38, 0x44, 0x2f, 0x47, 0x5b, 0x22, 0x4c, 0xb0, 0xa6, 0x2c,
  0x44, 0x30, 0x00, 0x0f, 0x80, 0x3e, 0x3b, 0x21, 0x00, 0x30, 0x30, 0xba,
  0x00, 0x00, 0xb8, 0xfa, 0x40, 0x00, 0x30, 0x27, 0xfa, 0x84, 0xa9, 0x2f,
  0x00, 0x05, 0xa7, 0x7b, 0xbc, 0x00, 0x16, 0x4f, 0x00, 0x48, 0x00, 0x7b,
  0x7f, 0x40, 0xfa, 0x3a, 0x03, 0x21, 0x00, 0x88, 0xb7, 0x21, 0x80, 0x4f,
  0x47, 0x39, 0x47, 0xad, 0x4f, 0x38, 0x27, 0x4f, 0x43, 0x7f, 0xa9, 0x27,
  0x3e, 0x2f, 0x11, 0x33, 0x18, 0xa6, 0x60, 0x47, 0x42, 0xaa, 0x10, 0x31,
  0x95, 0x85, 0xa2, 0xa4, 0xe7, 0x60, 0x0b, 0x3e, 0xc3, 0x60, 0x2c, 0x2b,
  0x22, 0x0b, 0x1d, 0x04, 0x00, 0x18, 0x60, 0xf9, 0x27, 0x47, 0x2c, 0x21,
  0x12, 0x3e, 0x4f, 0x10, 0x17, 0x60, 0x27, 0x32, 0x0f, 0xb9, 0x60, 0x22,
  0x42, 0xe3, 0x47, 0x40, 0x5b, 0x47, 0x19, 0x60, 0xe6, 0x61, 0x4b, 0x87,
  0x29, 0x46, 0x29, 0x30, 0x47, 0x44, 0xae, 0x2e, 0x47, 0x0c, 0x6a, 0x27,
  0x68, 0x0f, 0x03, 0x46, 0x00, 0x0d, 0x38, 0xd7, 0x1b, 0x10, 0x4a, 0x4a,
  0x28, 0x65, 0xaa, 0x10, 0x21, 0x4c, 0x33, 0x68, 0x00, 0x21, 0x93, 0x04,
  0x84, 0x47, 0x46, 0x44, 0xaf, 0x40, 0x0b, 0x03, 0x03, 0x19, 0x29, 0x46,
  0x4f, 0x27, 0x6a, 0x60, 0x29, 0x42, 0x0b, 0x7f, 0x2e, 0x60, 0x03, 0x97,
  0x40, 0x6a, 0x47, 0x64, 0x46, 0x33, 0x3e, 0x9f, 0x25, 0x27, 0x7a, 0x19,
  0x8c, 0x3e, 0xb2, 0x79, 0x4a, 0xa2, 0x87, 0x80, 0x80, 0x87, 0x21, 0x27,
  0x0b, 0x87, 0x7a, 0x9c, 0x87, 0x7f, 0xa9, 0x4a, 0x7f, 0x7f, 0x25, 0x40,
  0x00, 0x25, 0x7f, 0x27, 0x7d, 0x04, 0x87, 0x9d, 0x19, 0x42, 0x1c, 0x27,
  0xb0, 0x7b, 0x87, 0x7f, 0x7f, 0x3e, 0x27, 0x79, 0x87, 0x3e, 0x21, 0x87,
  0x25, 0x27, 0x25, 0xaf, 0x3e, 0x7a, 0x27, 0x3e, 0x10, 0x0b, 0xb6, 0x10,
  0x1d, 0x21, 0x0b, 0x99, 0xb7, 0x80, 0x2c, 0x79, 0x15, 0x14, 0x7a, 0x21,
  0x1c, 0x15, 0x80, 0x1d, 0x12, 0x40, 0x21, 0xa3, 0xa9, 0x9d, 0x1a, 0x98,
  0x0b, 0x91, 0x93, 0x78, 0x80, 0x71, 0xb9, 0x18, 0x15, 0x8b, 0xa9, 0x21,
  0xcc, 0x15, 0x8f, 0xa4, 0x7e, 0x0b, 0x18, 0x7c, 0x21, 0x80, 0x15, 0x84,
  0x80, 0x76, 0x18, 0x21, 0x17, 0x72, 0x21, 0x8c, 0x21, 0x74, 0x21, 0xb2,
  0x2f, 0x10, 0xb5, 0x0b, 0x29, 0xbd, 0x7f, 0x10, 0x60, 0x29, 0x4a, 0x2f,
  0xe7, 0x4d, 0xbd, 0xff, 0x16, 0x12, 0xc6, 0x40, 0x10, 0x10, 0x03, 0x41,
  0x27, 0x1e, 0x0f, 0x03, 0x05, 0x2f, 0x30, 0x29, 0xa6, 0x04, 0x80, 0x27,
  0x4f, 0x2e, 0x16, 0x34, 0xfe, 0xc6, 0x0b, 0x2b, 0x2f, 0x9b, 0xf5, 0x4b,
  0x0f, 0xae, 0xb4, 0x4b, 0xc6, 0x21, 0x04, 0x29, 0xbd, 0x29, 0x4e, 0xac,
  0xbd, 0x10, 0x64, 0x4b, 0x29, 0x4b, 0x2d, 0x60, 0xf0, 0x27, 0x80, 0x2f,
  0x3f, 0x17, 0x27, 0x04, 0x0d, 0x29, 0x2d, 0x45, 0x00, 0x9a, 0x29, 0x80,
  0xa6, 0x3b, 0xfe, 0xb0, 0x4a, 0x08, 0x10, 0x4b, 0x4a, 0x4f, 0x4a, 0x23,
  0x00, 0x21, 0x4c, 0x13, 0x4b, 0x4f, 0x46, 0xbc, 0x0f, 0xc0, 0xa8, 0x10,
  0x0f, 0x0f, 0x2f, 0x2b, 0x2f, 0x0f, 0x0c, 0x04, 0xac, 0x0b, 0x68, 0xbe,
  0xfa, 0x8d, 0x10, 0x04, 0x01, 0x8d, 0x01, 0x4a, 0x2d, 0x46, 0x2d, 0x60,
  0x2b, 0x43, 0x2f, 0x43, 0x60, 0x07, 0x82, 0x27, 0x7a, 0x26, 0x4f, 0x60,
  0x00, 0x4b, 0xa7, 0x27, 0x00, 0x1b, 0x2d, 0x7a, 0x2f, 0x2d, 0x27, 0x2d,
  0x43, 0x21, 0x3f, 0x60, 0x00, 0x8c, 0x22, 0x22, 0x47, 0x68, 0x9e, 0x2d,
  0x00, 0x56, 0x80, 0x22, 0x06, 0x3e, 0x95, 0x2b, 0x06, 0x47, 0x4f, 0xbd,
  0x22, 0x47, 0x47, 0x22, 0x21, 0x1b, 0x60, 0x4b, 0xa7, 0x2d, 0x60, 0x60,
  0x43, 0x21, 0x3e, 0x7a, 0x67, 0x27, 0x4f, 0x27, 0x67, 0x67, 0x0b, 0x46,
  0x4b, 0x3f, 0x7f, 0x4f, 0x00, 0x67, 0x40, 0x67, 0x12, 0x13, 0xba, 0x02,
  0x3f, 0x68, 0x60, 0x92, 0xa3, 0x40, 0x05, 0x68, 0x00, 0x4b, 0x67, 0x2d,
  0x2f, 0x10, 0x29, 0x2d, 0x98, 0xac, 0xc3, 0x5e, 0x46, 0x4b, 0xb8, 0xa7,
  0x92, 0xbd, 0xb4, 0xa3, 0x10, 0x05, 0x29, 0x3f, 0x13, 0xb7, 0x03, 0x40,
  0x56, 0x2b, 0x9c, 0x13, 0x2d, 0x4f, 0xac, 0x60, 0x29, 0x4c, 0x77, 0x4c,
  0x8c, 0x4b, 0x43, 0x2d, 0x29, 0xad, 0x67, 0x3f, 0x12, 0x04, 0x4c, 0x36,
  0x64, 0x60, 0x67, 0x21, 0x4b, 0x4b, 0x1f, 0x04, 0x3c, 0x67, 0x85, 0xbb,
  0x80, 0x10, 0xa4, 0x97, 0x3f, 0xa1, 0xa1, 0x40, 0x60, 0x2b, 0x60, 0x67,
  0x29, 0x2b, 0x2b, 0x3f, 0x68, 0x1f, 0x32, 0x2f, 0x80, 0x67, 0x8b, 0x4c,
  0x86, 0xaf, 0x67, 0x2b, 0x04, 0xb3, 0x8f, 0x04, 0x40, 0x7f, 0x89, 0x2d,
  0xed, 0x26, 0x4f, 0x06, 0xa9, 0x17, 0x1c, 0xb7, 0x4b, 0x01, 0x27, 0x2b,
  0x00, 0x0f, 0x03, 0x85, 0x91, 0x0b, 0x25, 0x4f, 0x27, 0x60, 0x40, 0xa6,
  0x3e, 0x7a, 0x83, 0x3c, 0x00, 0xab, 0x2b, 0x23, 0x52, 0xa9, 0x29, 0x3e,
  0x00, 0x05, 0x1e, 0x7f, 0x3e, 0x7f, 0x2d, 0x52, 0x7a, 0x40, 0x17, 0x40,
  0x03, 0x89, 0x2f, 0x05, 0x27, 0x2f, 0xab, 0x70, 0x0f, 0x26, 0x79, 0x85,
  0x21, 0x76, 0x6f, 0xaa, 0x47, 0x6f, 0x07, 0x21, 0x42, 0x0c, 0xa8, 0x0f,
  0xb3, 0x27, 0x13, 0x7e, 0x00, 0x3f, 0x3f, 0x4f, 0x00, 0x7f, 0x60, 0x9b,
  0x60, 0x1e, 0xc3, 0x10, 0x42, 0xb8, 0x21, 0x95, 0x00, 0x2c, 0xae, 0x6f,
  0xae, 0x11, 0x0c, 0x0b, 0x00, 0x4a, 0xb3, 0x40, 0x60, 0x13, 0x2c, 0x99,
  0x60, 0x8d, 0xad, 0x18, 0x2c, 0x7f, 0x0b, 0x79, 0x07, 0xba, 0x2e, 0x21,
  0x75, 0xa5, 0x71, 0x21, 0x18, 0x0b, 0x27, 0x17, 0x60, 0x47, 0x28, 0xda,
  0xf6, 0x40, 0x0f, 0x0d, 0x27, 0x4f, 0x60, 0x18, 0x00, 0x0f, 0xb2, 0x3e,
  0x80, 0xba, 0x2e, 0x4f, 0x21, 0xba, 0x27, 0x21, 0x10, 0x68, 0x0f, 0xbf,
  0x00, 0x4c, 0x48, 0xaa, 0x14, 0xf1, 0xaa, 0x4b, 0x00, 0x00, 0x14, 0x69,
  0x44, 0x48, 0x0d, 0xbd, 0x2c, 0x19, 0x14, 0x29, 0x40, 0x4b, 0x2e, 0x04,
  0x0b, 0x68, 0x28, 0x0c, 0x44, 0x27, 0x7f, 0x4a, 0x18, 0xc0, 0x48, 0x44,
  0x99, 0x27, 0x67, 0x64, 0x2e, 0x27, 0x0d, 0x46, 0x92, 0x6f, 0xc3, 0x29,
  0x00, 0x4a, 0x1c, 0x18, 0x00, 0x18, 0xca, 0x0c, 0x46, 0x47, 0x60, 0x0f,
  0x1c, 0x0f, 0x19, 0x47, 0x00, 0x08, 0x3e, 0x42, 0xfe, 0x4f, 0xfd, 0x17,
  0x00, 0x0f, 0x80, 0x11, 0x0f, 0x42, 0xfa, 0x0b, 0x0d, 0x2e, 0x0d, 0x0b,
  0x60, 0x0b, 0x2e, 0x10, 0x80, 0x10, 0x10, 0x21, 0xe3, 0x40, 0x2e, 0x64,
  0x48, 0x21, 0x0f, 0x40, 0x6c, 0x2e, 0xba, 0x00, 0x29, 0x2f, 0x21, 0x40,
  0x12, 0x14, 0x70, 0x8d, 0x0a, 0x4b, 0x44, 0x4f, 0x21, 0x0a, 0x07, 0x3e,
  0x65, 0x80, 0x9e, 0xf1, 0x27, 0xb5, 0x10, 0x14, 0x8a, 0xad, 0x64, 0x18,
  0x6c, 0x0b, 0x0d, 0x7f, 0x05, 0xc0, 0x05, 0x4b, 0xad, 0x27, 0xb4, 0x60,
  0x07, 0xbe, 0x1c, 0xca, 0x18, 0x2a, 0xa3, 0x6e, 0x14, 0x11, 0x8e, 0x65,
  0x0b, 0x4b, 0x2a, 0xf6, 0x10, 0x0b, 0xfd, 0x10, 0x2a, 0x0f, 0x21, 0xff,
  0x60, 0x4f, 0x1a, 0xbd, 0x40, 0x2e, 0xbc, 0x0f, 0x6a, 0x18, 0x42, 0x21,
  0x0b, 0x80, 0x27, 0x2e, 0x10, 0x22, 0x4f, 0x48, 0x40, 0x2a, 0x40, 0x2a,
  0xa8, 0x10, 0xba, 0x2f, 0x25, 0xb3, 0x2e, 0x9d, 0x65, 0x2e, 0x1c, 0x8a,
  0x2f, 0x2a, 0x23, 0x2f, 0x0b, 0x20, 0x2f, 0x05, 0x21, 0x3e, 0x27, 0x21,
  0x27, 0x97, 0x4f, 0x4f, 0x00, 0x2a, 0x60, 0x4f, 0x18, 0xc0, 0x27, 0x44,
  0x2c, 0x2b, 0x20, 0x62, 0x22, 0x4c, 0x0f, 0x12, 0x10, 0x2b, 0x40, 0x29,
  0x00, 0x2b, 0x2e, 0x6a, 0x16, 0x2b, 0x9d, 0xd8, 0x4f, 0x0b, 0x2a, 0x21,
  0x2e, 0x00, 0x60, 0x47, 0x00, 0x84, 0xb5, 0x27, 0x40, 0xff, 0x2f, 0x2b,
  0x80, 0x21, 0xcc, 0xac, 0x2a, 0x8d, 0xbc, 0x4f, 0x3e, 0x40, 0x10, 0x21,
  0x4f, 0x05, 0x12, 0x2a, 0x23, 0x4f, 0x9c, 0xc0, 0x2a, 0x12, 0x2b, 0x62,
  0x10, 0xfa, 0x27, 0xaf, 0x07, 0x2c, 0xc3, 0x2c, 0x07, 0x96, 0x14, 0x4a,
  0x1e, 0x2e, 0x2c, 0x42, 0x11, 0x96, 0x9a, 0x1e, 0xce, 0x0b, 0x27, 0x21,
  0x42, 0x98, 0x00, 0x44, 0x27, 0x42, 0x10, 0x07, 0xad, 0x2e, 0x6f, 0x19,
  0x42, 0x23, 0x80, 0x87, 0x2f, 0x04, 0x16, 0x0f, 0x2c, 0x2c, 0x2e, 0x27,
  0x21, 0x0b, 0x41, 0xc3, 0x8c, 0x6f, 0x21, 0x8e, 0x10, 0x13, 0x6f, 0xaf,
  0x0b, 0x07, 0x6f, 0xaf, 0x2e, 0x4c, 0x64, 0x3f, 0x23, 0x29, 0x04, 0x9f,
  0xb0, 0x14, 0x60, 0x47, 0xce, 0x9c, 0x77, 0xb3, 0x00, 0x2f, 0x6f, 0x0b,
  0x1c, 0x14, 0x10, 0x6a, 0x2e, 0x2c, 0x40, 0x18, 0x2c, 0xbd, 0xce, 0x21,
  0x00, 0x68, 0x45, 0x27, 0x10, 0x60, 0x16, 0x70, 0xa6, 0x60, 0x0b, 0x60,
  0xba, 0x2e, 0x44, 0x16, 0x46, 0x2e, 0x42, 0x3e, 0x68, 0x4b, 0xba, 0xbd,
  0x21, 0xaf, 0x29, 0x04, 0x16, 0x27, 0xba, 0x06, 0x29, 0x47, 0x84, 0x0c,
  0x27, 0x1a, 0xb1, 0x47, 0x08, 0x39, 0x14, 0x9a, 0x4f, 0x2c, 0x73, 0x21,
  0x1f, 0x0c, 0x46, 0x8c, 0xac, 0x0b, 0x18, 0x2e, 0x1c, 0x0c, 0x0d, 0x16,
  0x21, 0xa1, 0x4c, 0x2c, 0xab, 0x12, 0x4f, 0x04, 0x0d, 0x0c, 0xad, 0x21,
  0x2c, 0x0d, 0x18, 0x98, 0x86, 0x4f, 0x4c, 0x0c, 0xb8, 0x27, 0x47, 0x85,
  0x47, 0x7b, 0xa4, 0x4f, 0x44, 0x7d, 0x21, 0x97, 0x21, 0x75, 0x27, 0x4c,
  0x2a, 0x43, 0x0b, 0x6f, 0x6f, 0x11, 0xc0, 0x68, 0xc0, 0x15, 0x00, 0xca,
  0x8e, 0x6b, 0x9b, 0x7f, 0x00, 0x6e, 0x6f, 0xc0, 0x00, 0x00, 0x2e, 0x2a,
  0x04, 0x00, 0xc0, 0x62, 0x62, 0x27, 0x07, 0x70, 0x00, 0x10, 0x60, 0x15,
  0x15, 0x00, 0x1f, 0x16, 0x00, 0x63, 0x00, 0x21, 0x27, 0x15, 0x8f, 0x6f,
  0xb5, 0x6f, 0x00, 0x0b, 0x67, 0x2c, 0x66, 0x9d, 0x60, 0x14, 0x4a, 0x07,
  0x9d, 0x43, 0x9f, 0xbd, 0x42, 0x3e, 0x6f, 0x9f, 0xc0, 0x6f, 0x60, 0x27,
  0x62, 0x69, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xbd, 0x1d, 0x6a, 0x6f, 0x68,
  0x67, 0x69, 0x68, 0x6a, 0x6f, 0x62, 0xc0, 0x66, 0x60, 0x64, 0x6f, 0x60,
  0x80, 0x62, 0x61, 0x62, 0xc0, 0x69, 0x6b, 0x6f, 0xc0, 0x6f, 0x68, 0xc0,
  0x6f, 0x6a, 0x62, 0x67, 0xc0, 0x66, 0x60, 0x62, 0x62, 0x6f, 0x68, 0x60,
  0xc0, 0x68, 0x6f, 0x85, 0xc0, 0x1f, 0x27, 0x3e, 0x6f, 0x6c, 0x67, 0x6d,
  0xc0, 0x15, 0x60, 0x15, 0x6f, 0x60, 0x6f, 0xc0, 0x15, 0x69, 0x60, 0xc0,
  0x00, 0x68, 0xc0, 0x67, 0x13, 0x15, 0x69, 0x65, 0xc0, 0xc0, 0x68, 0x15,
  0x63, 0x15, 0x60, 0x6c, 0x00, 0x68, 0x15, 0x64, 0x60, 0x60, 0x6f, 0x67,
  0x80, 0x15, 0xc0, 0x68, 0x15, 0x65, 0x68, 0x6b, 0x6a, 0xc0, 0x60, 0x64,
  0x6b, 0x68, 0xc0, 0x68, 0x15, 0xc0, 0xc0, 0xc0, 0x15, 0x15, 0x6f, 0x60,
  0x64, 0x60, 0x68, 0x6f, 0xc0, 0x15, 0x64, 0x15, 0x6d, 0x6b, 0x67, 0xc0,
  0x15, 0x63, 0x6e, 0xc0, 0x00, 0x6f, 0xc0, 0x65, 0x1b, 0x15, 0x6d, 0x6d,
  0xc0, 0xc0, 0x66, 0x15, 0x68, 0x15, 0x68, 0x62, 0x00, 0x68, 0x15, 0x62,
  0x6d, 0x64, 0x61, 0x68, 0x80, 0x15, 0xc0, 0x6c, 0x15, 0x65, 0x60, 0x60,
  0x65, 0xc0, 0x6e, 0x62, 0x62, 0x6f, 0xc0, 0x63, 0x15, 0xc0, 0xc0, 0xc0,
  0x15, 0x15, 0x60, 0x66, 0x69, 0x64, 0x63, 0x63, 0xc0, 0x15, 0x64, 0x15,
  0x60, 0x68, 0x60, 0xc0, 0x15, 0x67, 0x6a, 0xc0, 0x00, 0x6f, 0xc0, 0x6b,
  0x17, 0x15, 0x67, 0x62, 0xc0, 0xc0, 0x68, 0x15, 0x69, 0x15, 0x67, 0x67,
  0x00, 0x64, 0x15, 0x6f, 0x6c, 0x67, 0x60, 0x68, 0x80, 0x15, 0xc0, 0x64,
  0x15, 0x63, 0x68, 0x64, 0x64, 0xc0, 0x64, 0x63, 0x63, 0x63, 0xc0, 0x6f,
  0x15, 0xc0, 0xc0, 0xc0, 0x15, 0x15, 0x61, 0x6d, 0x68, 0x62, 0x63, 0x6f,
  0xc0, 0x15, 0x67, 0x15, 0x67, 0x6a, 0x6f, 0xc0, 0x15, 0x68, 0x69, 0xc0,
  0x11, 0x6f, 0xc0, 0x60, 0x1f, 0x15, 0x67, 0x64, 0xc0, 0xc0, 0x6f, 0x15,
  0x68, 0x15, 0x6b, 0x64, 0x00, 0x60, 0x15, 0x6c, 0x6a, 0x67, 0x68, 0x68,
  0x80, 0x15, 0xc0, 0x6c, 0x15, 0x6a, 0x67, 0x60, 0x69, 0xc0, 0x6a, 0x68,
  0x68, 0x61, 0xc0, 0x69, 0x15, 0xc0, 0xc0, 0xc0, 0x15, 0x15, 0x69, 0x60,
  0x65, 0x6c, 0x60, 0x63, 0x10, 0x10, 0xce, 0x15, 0x42, 0x0b, 0x09, 0x0b,
  0x40, 0x4a, 0x18, 0xc0, 0x00, 0x0d, 0x4a, 0x13, 0x00, 0x00, 0x61, 0x1d,
  0x6f, 0x0f, 0x0b, 0x0d, 0x44, 0x0b, 0x60, 0x6b, 0x00, 0x60, 0x40, 0x13,
  0x0c, 0xb7, 0xce, 0x9c, 0x00, 0xce, 0x00, 0x40, 0x60, 0x10, 0xdc, 0x64,
  0x60, 0x0b, 0x15, 0x19, 0x13, 0xb8, 0x48, 0x67, 0x10, 0xc0, 0x13, 0xc0,
  0x15, 0x15, 0x60, 0x68
};
const unsigned int ROM_len = 4096;

// usart debugger

// operations
static void br(uint8_t inst);
static void call(uint8_t inst);
static void retn();
static void xma();

// K8 divider
#ifdef K8_DIV
#if K8_DIV > 1
// todo: add K8 divider to latch handler
#warning("warning: K8 divider is not currently supported, K8 will pass through")
#endif
#endif

// handle latching mode
#ifdef MODE
// read value of l
#ifdef L
#define io_get_l() get(L)
#else
#define io_get_l() \
  (get(L8) << 3) | (get(L4) << 2) | (get(L2) << 1) | (get(L1) << 0)
#endif
uint8_t l_latch = 0;
#define LATCH l_latch = get(MODE) ? l_latch | io_get_l() : 0;
#endif

#ifdef NOLATCH
#undef LATCH
#endif


// default latching mode handler (null)
#ifndef LATCH
#define LATCH
#endif

// default ONCE handler (null)
#ifndef ONCE_INST_HOOK
#define ONCE_INST_HOOK
#endif

// default ONCE_CLOCK_HOOK (null)
#ifndef ONCE_CLOCK_HOOK
#define ONCE_CLOCK_HOOK
#endif

#ifdef SOFT_RESET
#define RESET_HOOK \
  if (rset) {      \
    rset = 0;      \
    reg_init();    \
    return 0; 	   \
  }
#else
#define RESET_HOOK
#endif

#define jump()                                         \
  ONCE_INST_HOOK                                       \
  LATCH                                                \
  /* handle soft reset */                              \
  RESET_HOOK                                           \
  inst = fetch(ca, pa, pc);                            \
  pc = next(pc);                                       \
  goto* is[inst]

#ifdef ULIMIT
#undef jump
#define jump()              \
  /* handle soft reset */   \
  RESET_HOOK                \
  inst = fetch(ca, pa, pc); \
  pc = next(pc);            \
  goto* is[inst]
#endif

int phoenix_loop(void) {

  // set ram to 0xf (typical for tms1x00) at power-up
  for (uint8_t i = 0; i < sizeof(RAM) / sizeof(RAM[0]); RAM[i++] = 0x0)
    ;

  // set initialisation values
  reg_init();

  // configure device
  phoenix_setup();

#if TARGET == TMS1000
  const void* is[] = {
      &&COMX,  &&A8AAC, &&YNEA,  &&TAM,   &&TAMZA, &&A10AAC, &&A6AAC, &&DAN,
      &&TKA,   &&KNEZ,  &&TDO,   &&CLO,   &&RSTR,  &&SETR,   &&IA,    &&RETN,
      &&LDP,   &&LDP,   &&LDP,   &&LDP,   &&LDP,   &&LDP,    &&LDP,   &&LDP,
      &&LDP,   &&LDP,   &&LDP,   &&LDP,   &&LDP,   &&LDP,    &&LDP,   &&LDP,
      &&TAMIY, &&TMA,   &&TMY,   &&TYA,   &&TAY,   &&AMAAC,  &&MNEZ,  &&SAMAN,
      &&IMAC,  &&ALEM,  &&DMAN,  &&IYC,   &&DYN,   &&CPAIZ,  &&XMA,   &&CLA,
      &&SBIT,  &&SBIT,  &&SBIT,  &&SBIT,  &&RBIT,  &&RBIT,   &&RBIT,  &&RBIT,
      &&TBIT1, &&TBIT1, &&TBIT1, &&TBIT1, &&LDX,   &&LDX,    &&LDX,   &&LDX,
      &&TCY,   &&TCY,   &&TCY,   &&TCY,   &&TCY,   &&TCY,    &&TCY,   &&TCY,
      &&TCY,   &&TCY,   &&TCY,   &&TCY,   &&TCY,   &&TCY,    &&TCY,   &&TCY,
      &&YNEC,  &&YNEC,  &&YNEC,  &&YNEC,  &&YNEC,  &&YNEC,   &&YNEC,  &&YNEC,
      &&YNEC,  &&YNEC,  &&YNEC,  &&YNEC,  &&YNEC,  &&YNEC,   &&YNEC,  &&YNEC,
      &&TCMIY, &&TCMIY, &&TCMIY, &&TCMIY, &&TCMIY, &&TCMIY,  &&TCMIY, &&TCMIY,
      &&TCMIY, &&TCMIY, &&TCMIY, &&TCMIY, &&TCMIY, &&TCMIY,  &&TCMIY, &&TCMIY,
      &&ALEC,  &&ALEC,  &&ALEC,  &&ALEC,  &&ALEC,  &&ALEC,   &&ALEC,  &&ALEC,
      &&ALEC,  &&ALEC,  &&ALEC,  &&ALEC,  &&ALEC,  &&ALEC,   &&ALEC,  &&ALEC,
      &&BR,    &&BR,    &&BR,    &&BR,    &&BR,    &&BR,     &&BR,    &&BR,
      &&BR,    &&BR,    &&BR,    &&BR,    &&BR,    &&BR,     &&BR,    &&BR,
      &&BR,    &&BR,    &&BR,    &&BR,    &&BR,    &&BR,     &&BR,    &&BR,
      &&BR,    &&BR,    &&BR,    &&BR,    &&BR,    &&BR,     &&BR,    &&BR,
      &&BR,    &&BR,    &&BR,    &&BR,    &&BR,    &&BR,     &&BR,    &&BR,
      &&BR,    &&BR,    &&BR,    &&BR,    &&BR,    &&BR,     &&BR,    &&BR,
      &&BR,    &&BR,    &&BR,    &&BR,    &&BR,    &&BR,     &&BR,    &&BR,
      &&BR,    &&BR,    &&BR,    &&BR,    &&BR,    &&BR,     &&BR,    &&BR,
      &&CALL,  &&CALL,  &&CALL,  &&CALL,  &&CALL,  &&CALL,   &&CALL,  &&CALL,
      &&CALL,  &&CALL,  &&CALL,  &&CALL,  &&CALL,  &&CALL,   &&CALL,  &&CALL,
      &&CALL,  &&CALL,  &&CALL,  &&CALL,  &&CALL,  &&CALL,   &&CALL,  &&CALL,
      &&CALL,  &&CALL,  &&CALL,  &&CALL,  &&CALL,  &&CALL,   &&CALL,  &&CALL,
      &&CALL,  &&CALL,  &&CALL,  &&CALL,  &&CALL,  &&CALL,   &&CALL,  &&CALL,
      &&CALL,  &&CALL,  &&CALL,  &&CALL,  &&CALL,  &&CALL,   &&CALL,  &&CALL,
      &&CALL,  &&CALL,  &&CALL,  &&CALL,  &&CALL,  &&CALL,   &&CALL,  &&CALL,
      &&CALL,  &&CALL,  &&CALL,  &&CALL,  &&CALL,  &&CALL,   &&CALL,  &&CALL};
#endif

#if TARGET == TMS1100 || TARGET == TMS1600
  // instruction set; n.b. COMC (0x0b) is TPC in TMS1600
  const void* is[] = {
      &&MNEA,  &&ALEM,  &&YNEA,  &&XMA,   &&DYN,    &&IYC,    &&AMAAC, &&DMAN,
      &&TKA,   &&COMX,  &&TDO,   &&COMC,  &&RSTR,   &&SETR,   &&KNEZ,  &&RETN,
      &&LDP,   &&LDP,   &&LDP,   &&LDP,   &&LDP,    &&LDP,    &&LDP,   &&LDP,
      &&LDP,   &&LDP,   &&LDP,   &&LDP,   &&LDP,    &&LDP,    &&LDP,   &&LDP,
      &&TAY,   &&TMA,   &&TMY,   &&TYA,   &&TAMDYN, &&TAMIYC, &&TAMZA, &&TAM,
      &&LDX,   &&LDX,   &&LDX,   &&LDX,   &&LDX,    &&LDX,    &&LDX,   &&LDX,
      &&SBIT,  &&SBIT,  &&SBIT,  &&SBIT,  &&RBIT,   &&RBIT,   &&RBIT,  &&RBIT,
      &&TBIT1, &&TBIT1, &&TBIT1, &&TBIT1, &&SAMAN,  &&CPAIZ,  &&IMAC,  &&MNEZ,
      &&TCY,   &&TCY,   &&TCY,   &&TCY,   &&TCY,    &&TCY,    &&TCY,   &&TCY,
      &&TCY,   &&TCY,   &&TCY,   &&TCY,   &&TCY,    &&TCY,    &&TCY,   &&TCY,
      &&YNEC,  &&YNEC,  &&YNEC,  &&YNEC,  &&YNEC,   &&YNEC,   &&YNEC,  &&YNEC,
      &&YNEC,  &&YNEC,  &&YNEC,  &&YNEC,  &&YNEC,   &&YNEC,   &&YNEC,  &&YNEC,
      &&TCMIY, &&TCMIY, &&TCMIY, &&TCMIY, &&TCMIY,  &&TCMIY,  &&TCMIY, &&TCMIY,
      &&TCMIY, &&TCMIY, &&TCMIY, &&TCMIY, &&TCMIY,  &&TCMIY,  &&TCMIY, &&TCMIY,
      &&AC1AC, &&AC1AC, &&AC1AC, &&AC1AC, &&AC1AC,  &&AC1AC,  &&AC1AC, &&AC1AC,
      &&AC1AC, &&AC1AC, &&AC1AC, &&AC1AC, &&AC1AC,  &&AC1AC,  &&AC1AC, &&CLA,
      &&BR,    &&BR,    &&BR,    &&BR,    &&BR,     &&BR,     &&BR,    &&BR,
      &&BR,    &&BR,    &&BR,    &&BR,    &&BR,     &&BR,     &&BR,    &&BR,
      &&BR,    &&BR,    &&BR,    &&BR,    &&BR,     &&BR,     &&BR,    &&BR,
      &&BR,    &&BR,    &&BR,    &&BR,    &&BR,     &&BR,     &&BR,    &&BR,
      &&BR,    &&BR,    &&BR,    &&BR,    &&BR,     &&BR,     &&BR,    &&BR,
      &&BR,    &&BR,    &&BR,    &&BR,    &&BR,     &&BR,     &&BR,    &&BR,
      &&BR,    &&BR,    &&BR,    &&BR,    &&BR,     &&BR,     &&BR,    &&BR,
      &&BR,    &&BR,    &&BR,    &&BR,    &&BR,     &&BR,     &&BR,    &&BR,
      &&CALL,  &&CALL,  &&CALL,  &&CALL,  &&CALL,   &&CALL,   &&CALL,  &&CALL,
      &&CALL,  &&CALL,  &&CALL,  &&CALL,  &&CALL,   &&CALL,   &&CALL,  &&CALL,
      &&CALL,  &&CALL,  &&CALL,  &&CALL,  &&CALL,   &&CALL,   &&CALL,  &&CALL,
      &&CALL,  &&CALL,  &&CALL,  &&CALL,  &&CALL,   &&CALL,   &&CALL,  &&CALL,
      &&CALL,  &&CALL,  &&CALL,  &&CALL,  &&CALL,   &&CALL,   &&CALL,  &&CALL,
      &&CALL,  &&CALL,  &&CALL,  &&CALL,  &&CALL,   &&CALL,   &&CALL,  &&CALL,
      &&CALL,  &&CALL,  &&CALL,  &&CALL,  &&CALL,   &&CALL,   &&CALL,  &&CALL,
      &&CALL,  &&CALL,  &&CALL,  &&CALL,  &&CALL,   &&CALL,   &&CALL,  &&CALL};
#endif

  uint8_t inst;

  jump();

// tms1000 specific
#if TARGET == TMS1000
A8AAC:
  s = (a + 8) > 15;
  a = (a + 8) & 0xf;
  jump();
A10AAC:
  s = (a + 10) > 15;
  a = (a + 10) & 0xf;
  jump();
A6AAC:
  s = (a + 6) > 15;
  a = (a + 6) & 0xf;
  jump();
DAN:
  s = a >= 1;
  a = (a - 1) & 0xf;
  jump();
CLO:
  s = 1;
  o(0);
  jump();
IA:
  s = 1;
  a = (a + 1) & 0xf;
  jump();
TAMIY:
  s = 1;
  a = m(x, y);
  y = (y + 1) & 0xf;
  jump();
ALEC:
  s = a <= c(inst);
  jump();
#endif

// tms1000, tms1100, tms1600
MNEA:
  s = m(x, y) != a;
  jump();
ALEM:
  s = a <= m(x, y);
  jump();
YNEA:
  sl = s = y != a;
  jump();
XMA:
  xma();
  jump();
DYN:
  s = y >= 1;
  y = (y - 1) & 0xf;
  jump();
IYC:
  s = y == 15;
  y = (y + 1) & 0xf;
  jump();
AMAAC:
  s = (m(x, y) + a) > 15;
  a = (m(x, y) + a) & 0xf;
  jump();
DMAN:
  s = m(x, y) >= 1;
  a = (m(x, y) - 1) & 0xf;
  jump();
TKA:
  s = 1;
  a = k();
  jump();
COMX:
  s = 1;
#if TARGET == TMS1000
  toggle(x, 0);
  toggle(x, 1);
#endif
#if TARGET == TMS1100 || TARGET == TMS1600
  toggle(x, 2);
#endif
  jump();
TDO:
  s = 1;
  o(sl << 4 | a);
  jump();
COMC:  // TPC in TMS1600
  s = 1;
#if TARGET == TMS1600
  cb = pb & 0b11;
#else
  toggle(cb, 0);
#endif
  jump();
RSTR:
  s = 1;
  r(y, 0);
  jump();
SETR:
  s = 1;
  r(y, 1);
  jump();
KNEZ:
  s = k() != 0;
  jump();
RETN:
  retn();
  jump();

LDP:
  s = 1;
  pb = c(inst);
  jump();

TAY:
  s = 1;
  y = a;
  jump();
TMA:
  s = 1;
  a = m(x, y);
  jump();
TMY:
  s = 1;
  y = m(x, y);
  jump();
TYA:
  s = 1;
  a = y;
  jump();
TAMDYN:
  s = y >= 1;
  m(x, y, a);
  y = (y - 1) & 0xf;
  jump();
TAMIYC:
  s = y == 15;
  m(x, y, a);
  y = (y + 1) & 0xf;
  jump();
TAMZA:
  s = 1;
  m(x, y, a);
  a = 0;
  jump();
TAM:
  s = 1;
  m(x, y, a);
  jump();
LDX:
  s = 1;
#if TARGET == TMS1000
  x = b(inst);
#endif
#if TARGET == TMS1100 || TARGET == TMS1600
  x = f(inst);
#endif
  jump();

SBIT:
  s = 1;
  mb(x, y, b(inst), 1);
  jump();

RBIT:
  s = 1;
  mb(x, y, b(inst), 0);
  jump();

TBIT1:
  s = mb(x, y, b(inst));
  jump();

SAMAN:
  s = a <= m(x, y);
  a = (m(x, y) - a) & 0xf;
  jump();
CPAIZ:
  s = !a /*== 0*/;
  a = ((a ^ 0xf) + 1) & 0xf;
  jump();
IMAC:
  s = m(x, y) == 15;
  a = (m(x, y) + 1) & 0xf;
  jump();
MNEZ:
  s = m(x, y) != 0;
  jump();

TCY:
  s = 1;
  y = c(inst);
  jump();

YNEC:
  s = y != c(inst);
  jump();

TCMIY:
  s = 1;
  m(x, y, c(inst));
  y = (y + 1) & 0xf;
  jump();

AC1AC:
  s = (a + c(inst) + 1) > 15;
  a = (a + c(inst) + 1) & 0xf;
  jump();
CLA:
  s = 1;
  a = 0;
  jump();

BR:
  br(inst);
  jump();

CALL:
  call(inst);
  jump();

  return 0;
}

// xma
static inline void xma() {
  s = 1;
  uint8_t t = m(x, y);
  m(x, y, a);
  a = t;
  // uint8_t n = m(x, y);
  // swap(a, n);
  // m(x, y, n);
}

// retn
static inline void retn() {
#if TARGET == TMS1600
  if (cl1 /*== 1*/) {
    pc = sr1;
    sr1 = sr2;
    sr2 = sr3;

    pa = pb = psr1;
    psr1 = psr2;
    psr2 = psr3;

    ca = cb = csr1;
    csr1 = csr2;
    csr2 = csr3;

    cl1 = cl2;
    cl2 = cl3;
    cl3 = 0;
  } else {
    /* pc = next(pc); // pc already advanced */
  }
#else
  pa = pb;  // always set pa = pb
  if (cl /*== 1*/) {
    pc = sr;
/* pa = pb; */
#if TARGET == TMS1100
    ca = cs;
#endif
    cl = 0;
  } else {
    /* pa = pb; */
    /* pc = next(pc); // pc already advanced */
  }
#endif
  s = 1;
}

// call
static inline void call(uint8_t inst) {
  if (s /*== 1*/) {
#if TARGET == TMS1600
    sr3 = sr2;
    sr2 = sr1;
    sr1 = pc; /* pc already advanced */
    pc = w(inst);

    psr3 = psr2;
    psr2 = psr1;
    psr1 = pa;
    pa = pb;

    csr3 = csr2;
    csr2 = csr1;
    csr1 = ca;
    ca = cb;

    cl3 = cl2;
    cl2 = cl1;
    cl1 = 1;
#else
    if (!cl /*== 0*/) {
#if TARGET == TMS1100
      cs = ca;
      ca = cb;
#endif
      swap(pa, pb);
      sr = pc; /* pc already advanced */
      pc = w(inst);
      cl = 1;
    } else {
#if TARGET == TMS1100
      ca = cb;
#endif
      pb = pa;
      pc = w(inst);
    }
#endif
  } else {
#if TARGET == TMS1600
    cb = ca;
    pb = pa;
#endif
    /* pc = next(pc); // pc already advanced */
    s = 1;
  }
}

// br
static inline void br(uint8_t inst) {
  if (s /*== 1*/) {
#if TARGET == TMS1600
    pa = pb;
#else
    if (/*TARGET == TMS1600 ||*/ !cl /*== 0*/) {
      pa = pb;
    }
#endif
#if TARGET == TMS1100 || TARGET == TMS1600
    ca = cb;
#endif
    pc = w(inst);
  } else {
    s = 1;
    /* pc = next(pc); // pc already advanced */
  }
}

// read value of k
static inline uint8_t io_get_k() {
#ifdef KL
  if (get(KL)) {
#ifdef MODE
    if (get(MODE)) {
      return l_latch;
    }
#endif
    return io_get_l();
  }
#endif

#ifdef K
  return get(K);
#else
  return (get(K8) << 3) | (get(K4) << 2) | (get(K2) << 1) | (get(K1) << 0);
#endif
}

// set all o outputs
static inline void io_set_o(uint8_t byte) {
  // use opla
  uint8_t op = 0;
  for (uint8_t i = 0; i < OPLA_len; i += 2) {
    if (OPLA[i] == byte)
      op |= OPLA[i + 1];
  }
#ifdef O
  set(O, op);
#else
  // set outputs
  for (uint8_t i = 0; i <= 7; ++i)
    o(i, (op >> i) & 1);
#endif
}

// set specific o output
#ifdef O
static inline void io_set_o_bit(uint8_t bit, uint8_t value) {
  uint8_t e = get(O);
  set(O, bit(e, bit, value));
}
#else
void io_set_o_bit(uint8_t bit, uint8_t value) {
  switch (bit) {
    case 7:
      set(O7, value);
      break;
    case 6:
      set(O6, value);
      break;
    case 5:
      set(O5, value);
      break;
    case 4:
      set(O4, value);
      break;
    case 3:
      set(O3, value);
      break;
    case 2:
      set(O2, value);
      break;
    case 1:
      set(O1, value);
      break;
    case 0:
      set(O0, value);
      break;
    default:
      break;
  }
}
#endif

// get value of o register
static inline uint8_t io_get_o() {
#ifdef O
  return get(O);
#else
  return (get(O7) << 7) | (get(O6) << 6) | (get(O5) << 5) | (get(O4) << 4) |
         (get(O3) << 3) | (get(O2) << 2) | (get(O1) << 1) | (get(O0) << 0);
#endif
}

// set all r outputs
static inline void io_set_r(uint16_t data) {
#ifdef R
  set(R, data);
#else
  for (uint8_t i = 0; i <= 10; ++i)
    r(i, (data >> i) & 1);
#endif
}

// set specific r output
#ifdef R
static inline void io_set_r_bit(uint8_t bit, uint8_t value) {
#ifdef R_BIT
  set(R_BIT, bit, value);
#else
  uint16_t e = get(R);
  set(R, bit(e, bit, value));
#endif
}
#else
void io_set_r_bit(uint8_t bit, uint8_t value) {
  switch (bit) {
#if TARGET == TMS1600
    case 15:
      set(R15, value);
      break;
    case 14:
      set(R14, value);
      break;
    case 13:
      set(R13, value);
      break;
    case 12:
      set(R12, value);
      break;
    case 11:
      set(R11, value);
      break;
#endif
    case 10:
      set(R10, value);
      break;
    case 9:
      set(R9, value);
      break;
    case 8:
      set(R8, value);
      break;
    case 7:
      set(R7, value);
      break;
    case 6:
      set(R6, value);
      break;
    case 5:
      set(R5, value);
      break;
    case 4:
      set(R4, value);
      break;
    case 3:
      set(R3, value);
      break;
    case 2:
      set(R2, value);
      break;
    case 1:
      set(R1, value);
      break;
    case 0:
      set(R0, value);
      break;
    default:
      break;
  }
}
#endif

// get value of r register
static inline uint16_t io_get_r() {
#ifdef R
  return get(R);
#else
#if TARGET == TMS1600
  return (get(R15) << 15) | (get(R14) << 14) | (get(R13) << 13) |
         (get(R12) << 12) | (get(R11) << 11) | (get(R10) << 10) |
         (get(R9) << 9) | (get(R8) << 8) | (get(R7) << 7) | (get(R6) << 6) |
         (get(R5) << 5) | (get(R4) << 4) | (get(R3) << 3) | (get(R2) << 2) |
         (get(R1) << 1) | (get(R0) << 0);
#else
  return (get(R10) << 10) | (get(R9) << 9) | (get(R8) << 8) | (get(R7) << 7) |
         (get(R6) << 6) | (get(R5) << 5) | (get(R4) << 4) | (get(R3) << 3) |
         (get(R2) << 2) | (get(R1) << 1) | (get(R0) << 0);
#endif
#endif
}


// clock register and vector mappings
// for single counter chips
#ifndef TCCR0B
#define TCCR0B TCCR0
#endif  // TCCR0B
#ifndef TCCR0A
#define TCCR0A TCCR0
#endif  // TCCR0A
#ifndef OCR0A
#define OCR0A OCR0
#define TIMER0_vect TIMER0_COMP_vect
//#define TIMER0_vect TIMER0_OVF_vect
#endif  // OCR0A
#ifndef TIMSK0
#define TIMSK0 TIMSK
#endif  // TIMSK0
#ifndef OCIE0A
#define OCIE0A OCIE0
#endif  // OCIE0A



// default vector
#ifndef TIMER0_vect
#define TIMER0_vect TIMER0_COMPA_vect
#endif  // TIMER0_vect

// handle TIMER0_COMPA interrupt
ISR(TIMER0_vect) {
  ONCE_CLOCK_HOOK
}

//
//
// 

void set_sram1(uint16_t addr, uint8_t data) {
  data = ~ data; 
  SRAM[addr >> 1] = (SRAM[addr >> 1] & (0b1111 << (4 * !(addr & 1)))) |
    (data & 0b1111) << (4 * (addr & 1));
}

uint8_t get_sram1(uint16_t addr) {
  return ~ (SRAM[addr >> 1] >> (4 * (addr & 1))) & 0b1111;
}

uint32_t TCCR0B_saved = 0; 

void phoenix_clock() {

 
  set(CLKPR, CLKPS3, 0);
  set(CLKPR, CLKPS2, 0);
  set(CLKPR, CLKPS1, 0);
  set(CLKPR, CLKPS0, 0);

  TCCR0B_saved = TCCR0B;
  
  set(TCCR0B, CS00, 1);
  set(TCCR0B, CS01, 0);
  set(TCCR0B, CS02, 1);

  set(TCCR0A, WGM01, 1);
  set(TIMSK0, OCIE1A, 1);
  sei(); 
    
}

void phoenix_clock_off() {

   set(TIMSK0, OCIE1A, 0);
   TCCR0B = TCCR0B_saved; 
    
}
